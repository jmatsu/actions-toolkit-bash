#!/usr/bin/env bash

set -Eeuo pipefail

if [[ "${ACTIONS_TOOLKIT_DEBUG:-}" == "true" ]]; then
  set -x
fi

if (("$(echo | wc -c)" == 1)); then
  OS_EOL='\n'
else
  OS_EOL='\r\n'
fi

escape_property() {
  echo -nE "$*" | sed -e 's/%/%25/g' -e 's/\\r/%0D/g' -e 's/\\n/%0A/g' -e 's/:/%3A/g' -e 's/,/%2C/g'
}

escape_data() {
  local data= first=0

  while read line || [[ -n "$line" ]]; do
    if [[ ! "$first" == "0" ]]; then
      data="$data$OS_EOL"
    fi

    first=1
    data="$data$line"
  done

  if [[ "${INCLUDE_EOL_AT_EOF:-1}" == "0" ]]; then
    data="$data$OS_EOL"
  fi

  echo -nE "$data" | sed -e 's/%/%25/g' -e 's/\\r/%0D/g' -e 's/\\n/%0A/g' | tr -d "$OS_EOL" # remove a EOL generated by sed
}

readonly CMD_STRING="::"

readonly command_name="${GH_COMMAND_NAME:-missing.command}"

padding=
properties=

while read env_key; do
  if [[ -z "$padding" ]]; then
    padding=" "
  fi

  property_name="$(sed -e 's/___GH_PROPERTIES$//' <<< $env_key)"
  property_value="$(escape_property "$(eval echo "\$$env_key")")"

  if [[ -n "$property_value" ]]; then
    if [[ -n "$properties" ]]; then
      properties="$properties,$property_name=$property_value"
    else
      properties="$property_name=$property_value"
    fi
  fi
done < <(env | awk -F= '$0=$1' | grep "___GH_PROPERTIES")

readonly data="$(cat - | escape_data)"

exec echo "${CMD_STRING}${command_name}${padding}${properties}${CMD_STRING}${data}"
